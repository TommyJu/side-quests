@page "/"
@attribute [Authorize]
@using System.Security.Claims
@using im_bored.Models
@using im_bored.Services
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthProvider
@inject QuestGeneratorService QuestService

<PageTitle>Home</PageTitle>

@inject ActivityService ActivityService

<div class="d-flex flex-column align-items-center justify-content-center mt-2">
    <!-- Filters: Horizontal Layout -->
    <div class="d-flex flex-wrap justify-content-center align-items-center gap-3 mb-4">

        <select class="form-select w-auto" @bind="selectedType">
            <option value="">All Types</option>
            @foreach (var type in Enum.GetValues<ActivityType>())
            {
                <option value="@type">@type</option>
            }
        </select>

        <select class="form-select w-auto" @bind="selectedParticipants">
            <option value="">All Participants</option>
            @foreach (var p in Enum.GetValues<ActivityParticipants>())
            {
                <option value="@p">@p</option>
            }
        </select>

        <select class="form-select w-auto" @bind="selectedPrice">
            <option value="">All Prices</option>
            @foreach (var p in Enum.GetValues<ActivityPrice>())
            {
                <option value="@p">@p</option>
            }
        </select>

        <select class="form-select w-auto" @bind="selectedDuration">
            <option value="">All Durations</option>
            @foreach (var d in Enum.GetValues<ActivityDuration>())
            {
                <option value="@d">@d</option>
            }
        </select>

        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="kidFriendly" @bind="onlyKidFriendly" />
            <label class="form-check-label" for="kidFriendly">Kid Friendly</label>
        </div>

    </div>


    <button class="rainbow-btn btn btn-lg text-white fw-bold px-4 py-2 rounded-pill mb-4"
        @onclick="LoadFilteredActivity">
        ✨ Generate a Quest ✨
    </button>

    @if (activity != null)
    {
        <div class="mt-4 mb-4 p-4 border rounded shadow bg-white" style="width: 100%; max-width: 800px;">
            <h4 class="text-lg font-semibold text-center" style="color: @randomColor">@activity.Title</h4>
            <p><strong>Type:</strong> @activity.Type</p>
            <p><strong>Participants:</strong> @activity.Participants</p>
            <p><strong>Price:</strong> @activity.Price</p>
            <p><strong>Duration:</strong> @activity.ActivityDuration</p>
            <p><strong>Kid Friendly:</strong> @(activity.kidFriendly ? "Yes" : "No")</p>

    <div class="d-flex justify-content-end mt-3">
        @if (activitySaved)
        {
            <div class="alert alert-success mb-0 py-2 px-3">🎉 Quest Accepted!</div>
        }
        else
        {
            <button class="btn btn-dark" @onclick="SaveActivity">✅ Accept Quest</button>
        }
    </div>

        </div>
    }
    else if (hasSearched)
    {
        <div class="alert alert-warning mt-3">No activities found with these filters 😢</div>
    }

    @* Semantic Kernel *@

    <button class="btn btn-primary" @onclick="GenerateQuestDescription">Generate Quest Description</button>

    @if (!string.IsNullOrEmpty(generatedQuestDescription))
    {
        <div class="mt-3 alert alert-success w-75" style="white-space: pre-wrap;">
            <h5>Quest Description</h5>
            @generatedQuestDescription
        </div>
    }


</div>



@code {
    // Semantic Kernel
    private string generatedQuestDescription = "";

    // Authentication and current user
    private ClaimsPrincipal? currentUser;
    private AuthenticationState? authState;
    private Activity? activity;
    
    // Activity title color
    private string randomColor = "black";
    
    // UI State
    private bool hasSearched = false;
    private bool activitySaved = false;

    // Filters
    private ActivityType? selectedType = null;
    private ActivityParticipants? selectedParticipants = null;
    private ActivityPrice? selectedPrice = null;
    private ActivityDuration? selectedDuration = null;
    private bool onlyKidFriendly = false;
    
    
    protected override async Task OnInitializedAsync()
    {
        authState = await AuthProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;
    }

    private async Task LoadFilteredActivity()
    {
        randomColor = GetRandomColor();
        activity = await ActivityService.GetFilteredRandomActivity(
        selectedType,
        selectedParticipants,
        selectedPrice,
        selectedDuration,
        onlyKidFriendly ? true : null
        );
        hasSearched = true;
        activitySaved = false; // Reset the saved state for new activity
    }
    // Generate a random color (excluding white)
    private string GetRandomColor()
    {
        Random rand = new Random();
        string[] colors = { "red", "green", "blue", "yellow", "purple", "orange", "pink", "brown", "gray" };
        return colors[rand.Next(colors.Length)];
    }

    private async Task SaveActivity()
    {
        if (activity == null) return;

        if (currentUser!.Identity != null && currentUser!.Identity.IsAuthenticated)
        {
            await ActivityService.SaveActivityAsync(currentUser, activity);
            activitySaved = true;
        }
    }

    // AI generated description
    // TODO: Return output to UI instead of console
    // TODO: Save description to UserSavedActivities
    private async Task GenerateQuestDescription()
    {
        if (activity == null) {
            return;
        }
        generatedQuestDescription = await QuestService.GenerateQuestDescriptionAsync(activity);
    }
}
